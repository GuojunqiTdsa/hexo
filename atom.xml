<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qiii~的博客</title>
  
  <subtitle>一个想记录所有知识点+BUG的菜鸟</subtitle>
  <link href="/hexo/atom.xml" rel="self"/>
  
  <link href="https://guojunqitdsa.github.io/"/>
  <updated>2019-01-08T02:22:55.872Z</updated>
  <id>https://guojunqitdsa.github.io/</id>
  
  <author>
    <name>Qiii~</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之Vue父子传值</title>
    <link href="https://guojunqitdsa.github.io/2019/01/08/%E5%89%8D%E7%AB%AF%E4%B9%8BVue%E7%88%B6%E5%AD%90%E4%BC%A0%E5%80%BC/"/>
    <id>https://guojunqitdsa.github.io/2019/01/08/前端之Vue父子传值/</id>
    <published>2019-01-08T02:00:35.000Z</published>
    <updated>2019-01-08T02:22:55.872Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>父模块 <code>father.vue</code> ，子模块 <code>son.vue</code></p></blockquote><a id="more"></a><h1 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//father.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;父元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;son :fatherContent="fValue"&gt;&lt;/</span>son&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./son'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                fValue: <span class="string">'父数据'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//son.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;子元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;&#123;fatherContent&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">           fatherContent: &#123;</span><br><span class="line">               type: <span class="built_in">String</span></span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//father.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;父元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;son v-on:sonContent="sonContent"&gt;&lt;/</span>son&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./son'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sonContent (sonContent) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(sonContent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;子元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="send"&gt;传值&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            send () &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'sonContent'</span>,<span class="string">'子元素的值'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;父模块 &lt;code&gt;father.vue&lt;/code&gt; ，子模块 &lt;code&gt;son.vue&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://guojunqitdsa.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://guojunqitdsa.github.io/tags/vue/"/>
    
      <category term="父子传值" scheme="https://guojunqitdsa.github.io/tags/%E7%88%B6%E5%AD%90%E4%BC%A0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>前端之Vue模拟数据与发送请求</title>
    <link href="https://guojunqitdsa.github.io/2019/01/08/%E5%89%8D%E7%AB%AF%E4%B9%8BVue%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    <id>https://guojunqitdsa.github.io/2019/01/08/前端之Vue模拟数据与发送请求/</id>
    <published>2019-01-08T01:18:44.000Z</published>
    <updated>2019-01-08T02:22:37.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>模拟数据与发送请求这块是凭着记忆思路写的可能会有bug</p></blockquote><a id="more"></a><h1 id="生成模拟数据"><a href="#生成模拟数据" class="headerlink" title="生成模拟数据"></a>生成模拟数据</h1><p>首先需要有一个<code>data.json</code> 的数据文件，里面一般是模拟数据，放在vue项目的根目录里</p><p>然后在<code>wabpack.dev.conf.js</code> 文件中头部位置加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">'json文件位置'</span>)</span><br><span class="line"><span class="keyword">var</span> 跟节点变量 = appData.跟节点</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apiRoutes = express.Router()</span><br><span class="line">app.user(<span class="string">'/api'</span>, apiRoutes)</span><br></pre></td></tr></table></figure><p>然后在当前文件下 <code>devServer</code> 对象最后加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">before (app) &#123;</span><br><span class="line">    app.get(<span class="string">'/api/路径'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            error: <span class="number">0</span>,</span><br><span class="line">            data: 跟节点变量[属性]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在浏览器中访问 <code>http://ip地址:端口号/api/路径</code> 就可以访问到对应的模拟数据</p><h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><p>vue发送请求需要使用到 <code>vueresource</code></p><p>在 <code>main.js</code> 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line">Vue.use(VueResource)</span><br></pre></td></tr></table></figure><p>在想获取数据的模块中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    created () &#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">'获取路径'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意修改配置文件时候需要重启<code>nodejs</code>的服务</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模拟数据与发送请求这块是凭着记忆思路写的可能会有bug&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://guojunqitdsa.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://guojunqitdsa.github.io/tags/vue/"/>
    
      <category term="vue-resource" scheme="https://guojunqitdsa.github.io/tags/vue-resource/"/>
    
      <category term="express" scheme="https://guojunqitdsa.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>前端之Element布局</title>
    <link href="https://guojunqitdsa.github.io/2019/01/08/%E5%89%8D%E7%AB%AF%E4%B9%8BElement%E5%B8%83%E5%B1%80/"/>
    <id>https://guojunqitdsa.github.io/2019/01/08/前端之Element布局/</id>
    <published>2019-01-08T00:52:34.000Z</published>
    <updated>2019-01-08T02:24:17.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨天使用 <code>element</code> 做了一个简单的后台前端布局，简单记录一下两个组件的用法</p><p>其实官方文档写的很详细了</p></blockquote><a id="more"></a><h1 id="Container-布局容器"><a href="#Container-布局容器" class="headerlink" title="Container 布局容器"></a>Container 布局容器</h1><p><code>Container</code>  布局容器的基本结构有5个，都是由 <code>flex</code> 做的布局：</p><blockquote><p><code>&lt;el-container&gt;</code>：外层容器。当子元素中包含<code>&lt;el-header&gt;</code>或<code>&lt;el-footer&gt;</code>时，全部子元素会垂直上下排列，否则会水平左右排列。</p><p><code>&lt;el-header&gt;</code>：顶栏容器。</p><p><code>&lt;el-aside&gt;</code>：侧边栏容器。</p><p><code>&lt;el-main&gt;</code>：主要区域容器。</p><p><code>&lt;el-footer&gt;</code>：底栏容器。</p></blockquote><p>官方说 <code>&lt;el-container&gt;</code> 的子标签只能是其他四个，其他四个的父标签只能是 <code>el-container&gt;</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container&gt;</span><br><span class="line">    &lt;el-header&gt;头部&lt;/el-header&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside&gt;边栏&lt;/el-aside&gt;</span><br><span class="line">        &lt;el-main&gt;内容&lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br></pre></td></tr></table></figure><p>大概就是以上代码的意思</p><p>但是，在我昨天写的代码里，<code>&lt;el-header&gt;</code> 部分里包含了3个元素，分别是logo、menu和个人信息，最初我是使用 <code>Layout布局</code> 实现，这个布局大概就类似 <code>BootStrap</code>  只不过每行有24个列，化分的更加详细一些。只是这种布局是按照百分比实现的分列，在使用logo和个人信息的块里我需要使用定长，menu是适应状态。</p><p>所有我又想起<code>&lt;el-container</code> 的<code>flex</code> 布局，大概是这样实现的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">dircetion</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span><span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"personal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-menu</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.personal</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道是不是最优方案，但是出现我想要的效果了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;昨天使用 &lt;code&gt;element&lt;/code&gt; 做了一个简单的后台前端布局，简单记录一下两个组件的用法&lt;/p&gt;
&lt;p&gt;其实官方文档写的很详细了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://guojunqitdsa.github.io/tags/web/"/>
    
      <category term="前端" scheme="https://guojunqitdsa.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="element" scheme="https://guojunqitdsa.github.io/tags/element/"/>
    
      <category term="后台组件" scheme="https://guojunqitdsa.github.io/tags/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端之Element入门</title>
    <link href="https://guojunqitdsa.github.io/2019/01/06/%E5%89%8D%E7%AB%AF%E4%B9%8BElement%E5%85%A5%E9%97%A8/"/>
    <id>https://guojunqitdsa.github.io/2019/01/06/前端之Element入门/</id>
    <published>2019-01-06T00:53:13.000Z</published>
    <updated>2019-01-07T01:36:42.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>element是一套为开发者、设计师和产品经理准备的级域Vue2.0的桌面端组件库，可以使用vue快速搭建前端</p></blockquote><a id="more"></a><h1 id="入门安装"><a href="#入门安装" class="headerlink" title="入门安装"></a>入门安装</h1><blockquote><p>前提需求 <code>nodejs</code> <code>npm</code> <code>vue-cli</code></p></blockquote><p>第一步、创建vue项目</p><blockquote><p>可以使用命令创建，也可以使用idea创建</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建webpack项目</span></span><br><span class="line">vue init wabpack my-project</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>第二部、在vue项目里安装 <code>element-ui</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p>第三部、引用，下面详细记录</p><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><h2 id="方式一、完整引入"><a href="#方式一、完整引入" class="headerlink" title="方式一、完整引入"></a>方式一、完整引入</h2><p>在 <code>main.js</code> 中引入如下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="方式二、按需引用"><a href="#方式二、按需引用" class="headerlink" title="方式二、按需引用"></a>方式二、按需引用</h2><p>借助 <code>babel-plugin-component</code><br>，我们可以只引入需要的组建，以达到减小项目体积的目的。<br>首先、安装 <code>babel-plugin-component</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure><p>然后，将 <code>.babelrc</code> 文件修改为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"modules"</span>: <span class="literal">false</span> &#125;]],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只希望引入部分组件，如： <code>Button</code> 和 <code>Select</code> ，那么在 <code>main.js</code> 中写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Select &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line">Vue.component(Select.name, Select);</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整组件列表和引入方式以 <a href="https://github.com/ElemeFE/element/blob/master/components.json" target="_blank" rel="noopener">https://github.com/ElemeFE/element/blob/master/components.json</a> 为准</p><p>到此为止 <code>Element-ui</code> 就算是搭建成功了，剩下的就是在 <code>App.vue</code> 中添加组件，开始搭建网站了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;element是一套为开发者、设计师和产品经理准备的级域Vue2.0的桌面端组件库，可以使用vue快速搭建前端&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://guojunqitdsa.github.io/tags/web/"/>
    
      <category term="前端" scheme="https://guojunqitdsa.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="element" scheme="https://guojunqitdsa.github.io/tags/element/"/>
    
      <category term="后台组件" scheme="https://guojunqitdsa.github.io/tags/%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>javaSE之面向对象</title>
    <link href="https://guojunqitdsa.github.io/2019/01/05/javaSE%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://guojunqitdsa.github.io/2019/01/05/javaSE之面向对象/</id>
    <published>2019-01-05T09:39:59.000Z</published>
    <updated>2019-01-08T00:29:14.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客搭建成功后，总想写点东西，想了半天从何写起<br>就从基础的面向对象写起吧</p></blockquote><a id="more"></a><h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><h2 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h2><ul><li>成员变量就是定义在类内部，方法外，作为类成员存在的变量或属性</li><li>局部变量就是定义在方法内部的变量，在方法外是不可以访问到的</li></ul><h2 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h2><ul><li><code>Overload</code> 重载：在同一个类中，出现方法名相同，参数列表不同的现象</li><li><code>Override</code> 重写：在子类中，出现和父类一模一样的方法声明的现象</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><blockquote><p>权限修饰符可以修饰类，成员方法，成员变量</p></blockquote><ul><li><code>public</code> ：公共的，是java中限制最宽的修饰符，不仅可以跨类访问，还可以跨包访问</li><li><code>protect</code> ：受保护的，被修饰的东西只能被本类和子类访问，<strong>可以跨包访问</strong></li><li><code>default</code> ：默认修饰符，可以不写，只能被本包访问，不论有没有继承关系</li><li><code>private</code> ：私有的，被修饰的东西只能被本类访问</li></ul><h3 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h3><blockquote><p><code>static</code>修饰符不能修饰类</p></blockquote><ul><li><p><code>static</code> ：静态的，被修饰的东西随着类的加载而加载，所以优先于对象，被所有的对象共享，可以直接通过类名调用，因为有以上特性所以会有如下情况出项</p><ul><li>在静态方法中不存在this关键字</li><li>静态只能访问静态，非静态能访问一切</li></ul></li><li><p><code>final</code> ：最终的，被修饰的东西不可以被改变</p><ul><li>被修饰的类不能被继承</li><li>被修饰的方法不能被重写</li><li>被修饰的变量不能重新赋值，称作自定义常量<ul><li>修饰引用类型，地址不变，内容可以改变</li><li>修饰的变量能且只能赋值一次</li></ul></li></ul></li></ul><h3 id="抽象修饰符"><a href="#抽象修饰符" class="headerlink" title="抽象修饰符"></a>抽象修饰符</h3><blockquote><p>抽象修饰符只有<code>abstract</code>修饰符<br>我们把一个不是具体的功能称为抽象功能，一个类中如果有抽象方法，那么该类必须是抽象类</p></blockquote><h4 id="抽象类特点"><a href="#抽象类特点" class="headerlink" title="抽象类特点"></a>抽象类特点</h4><blockquote><p>抽象方法是没有方法体，不是空方法体<br>抽象类的实例化是靠非抽象子类实现(多态)</p></blockquote><ul><li>抽象类和抽象方法必须用abstract关键字修饰</li><li>抽象类中不一定具有抽象方法，但有抽象方法的类必须定义为抽象类</li><li>抽象类不能实例化，因为不是具体的。抽象类有构造方法，用于子类访问父(抽象)类数据初始化</li><li>抽象类的子类如果不是抽象类，就必须重写所有的抽象方法</li></ul><h4 id="抽象类成员特点"><a href="#抽象类成员特点" class="headerlink" title="抽象类成员特点"></a>抽象类成员特点</h4><ul><li>成员变量：既可以是变量，也可以是常量</li><li>构造方法：用于子类访问父(抽象)类数据的初始化</li><li>成员方法：可以是抽象，也可以是非抽象<ul><li>抽象方法：强制要求子类做的事</li><li>非抽象方法：子类继承，提高代码复用性</li></ul></li></ul><h4 id="抽象使用场景"><a href="#抽象使用场景" class="headerlink" title="抽象使用场景"></a>抽象使用场景</h4><ul><li>抽象类中可以没有抽象方法，意义是不能创建对象，只能用于继承</li><li><code>abstract</code> 不能共存的关键字<ul><li><code>private</code> 冲突</li><li><code>final</code> 冲突</li><li><code>static</code> 无意义</li></ul></li></ul><h2 id="this-amp-amp-super"><a href="#this-amp-amp-super" class="headerlink" title="this &amp;&amp; super"></a>this &amp;&amp; super</h2><ul><li><code>this</code> 代表当前类实例化对象的引用，谁实例化了当前类，<code>this</code>就指向谁</li><li><code>super</code> 代表父类存储空间的表示，可以理解为父类引用</li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><blockquote><p>构造方法在实例化对象时自动执行的方法，或者说执行构造方法得到该类的对象</p></blockquote><ul><li>类中默认给出一个无参构造，当重载有参构造时，无参构造会消失，<strong>建议加上无参构造</strong></li><li>因为静态属于类的，在生成对象之前就存在，所以会优先加载所有类的静态代码块</li><li>子类会加载父类的无参构造，如果父类给定有参构造，没有无参构造，默认子类会报错</li><li>子类可以使用<code>super(参数)</code>来调用父类有参构造</li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>局部代码块：在方法内，用于限定变量的生命周期</li><li>构造代码块：类中成员位置，每次调用构造方法前先执行构造代码块，在重载多个构造方法时，可以将共同的代码放在一起</li><li>静态代码块：类中成员位置，用<code>static</code>关键字修饰，实例化时执行一次，一般用于类的初始化</li></ul><blockquote><p><strong>执行顺序</strong><br>父类静态代码块→子类静态代码块→父类构造代码块→父类构造方法→子类构造代码块→子类构造方法</p></blockquote><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;博客搭建成功后，总想写点东西，想了半天从何写起&lt;br&gt;就从基础的面向对象写起吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaSE" scheme="https://guojunqitdsa.github.io/tags/javaSE/"/>
    
      <category term="面向对象" scheme="https://guojunqitdsa.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://guojunqitdsa.github.io/2019/01/04/hello-world/"/>
    <id>https://guojunqitdsa.github.io/2019/01/04/hello-world/</id>
    <published>2019-01-04T05:42:50.882Z</published>
    <updated>2019-01-07T01:36:59.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我正式在自己的个人博客写下第一篇文章，留作纪念<br>由于刚刚搭建博客，markdown还不太会用，所以现在我是一边查询手册，一边写下第一篇博客<br>想想也是比较费劲，有机会一定要好好整理一篇markdown的文档</p></blockquote><a id="more"></a><h1 id="博客搭建流程"><a href="#博客搭建流程" class="headerlink" title="博客搭建流程"></a>博客搭建流程</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装Hexo之前需要两个工具</p><ul><li>node.js</li><li>git</li></ul><blockquote><p>在这里这两个安装就不再叙述了，有机会单独写一篇</p></blockquote><p>首先需要安装 <code>hexo-cli</code> ，可以直接使用<code>node.js</code>的<code>npm</code>命令就可以安装了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><h3 id="建立网站"><a href="#建立网站" class="headerlink" title="建立网站"></a>建立网站</h3><p>首先创建一个文件夹，我这里文件夹名为<code>hexo</code><br>然后进入到这个文件夹里，使用<code>hexo</code>命令安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;your_blog_name&gt;</span><br></pre></td></tr></table></figure><h3 id="配置网站"><a href="#配置网站" class="headerlink" title="配置网站"></a>配置网站</h3><p>在网站根目录里有一个<code>_config.yml</code>文件用来配置整个网站</p><blockquote><p>在后面的主题目录中还有<code>_config.yml</code>文件<br>WARNING:在 YAML 语法中，冒号后面必须要有一个空格才能继续写下去。<br>配置文件中参数过多，所以给出一个链接，可以到该网页上查看<br><a href="https://easyhexo.github.io/Easy-Hexo/1-Hexo-install-and-config/1-3-config-hexo.html#%E9%85%8D%E7%BD%AE-hexo-2" target="_blank" rel="noopener">https://easyhexo.github.io/Easy-Hexo/1-Hexo-install-and-config/1-3-config-hexo.html#%E9%85%8D%E7%BD%AE-hexo-2</a></p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>初始化命令, <code>layout</code> 表示他的模板（即页面或者文章），<code>title</code> 表示标题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>hexo new post 001</code> ，表示新建了一个标题为 001 的文章。<br><code>hexo new page 001</code> ，表示新建了一个标题为 001 的页面。</p></blockquote><p>创建的文件在<code>博客根目录/source/_post/</code>，然后使用markdown的工具，对创建的文件进行编辑就可以可</p><h3 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h3><p>在git上创建一个仓库，我这里是<code>hexo</code><br>安装部署插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>配置git</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your_name"</span></span><br><span class="line">$ git config --global user.email Your_email@example.com</span><br></pre></td></tr></table></figure><blockquote><p>每次提交用以上配置的git的信息记录是谁提交</p></blockquote><p>配置站点 <code>_config.yml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span>   <span class="comment"># 类型填git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># 你的Github仓库地址</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span>  <span class="comment"># 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。</span></span><br><span class="line"><span class="attr">  message:</span>  <span class="comment"># 提交信息可以自定义，不填的话默认为提交时间</span></span><br></pre></td></tr></table></figure><p>在你的 Hexo 站点根目录下，执行如下命令即可发布到 GitHub Pages 上。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure><hr><p>自定义域名</p><ul><li><p>如果你拥有个人域名，请将你的域名解析指向以下 IP 地址中的任意一个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure></li><li><p>打开仓库设置,找到 GitHub Pages 项目，修改 Custom domain 选项的值为你的自定义域名（不带 http 等前缀）</p></li><li>勾选 Custom domain 选项下的 Enforce HTTPS 选项，开启 Https 服务。</li></ul>]]></content>
    
    <summary type="html">
    
      Hello World
    
    </summary>
    
    
      <category term="bolg" scheme="https://guojunqitdsa.github.io/tags/bolg/"/>
    
      <category term="hexo" scheme="https://guojunqitdsa.github.io/tags/hexo/"/>
    
      <category term="git" scheme="https://guojunqitdsa.github.io/tags/git/"/>
    
      <category term="node" scheme="https://guojunqitdsa.github.io/tags/node/"/>
    
  </entry>
  
</feed>
